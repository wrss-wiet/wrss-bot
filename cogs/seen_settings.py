import json
import discord
import settings
from discord import app_commands
from discord.ext import commands

CONFIG_FILE = "commands_settings/seen_settings.json"

try:
    with open(CONFIG_FILE, "r") as f:
        SEEN_SETTINGS = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    print(f"Error loading {CONFIG_FILE}: {e}. Using empty settings.")
    SEEN_SETTINGS = {}

def save_seen_settings():
    with open(CONFIG_FILE, "w") as f:
        json.dump(SEEN_SETTINGS, f, indent=4)

class SeenSettingsCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="seensettings", description="Konfiguracja ustawie≈Ñ reakcji seen dla kana≈Ç√≥w.")
    @app_commands.guilds(discord.Object(id=settings.main_guild_id))
    @app_commands.describe(
        help="Wy≈õwietl pomoc dla tej komendy",
        channel="Wybierz kana≈Ç (opcjonalnie, tylko przy aktualizacji)",
        mode="Wybierz tryb dzia≈Çania reakcji seen (opcjonalnie, tylko przy aktualizacji)",
        scope="Zakres wy≈õwietlonych ustawie≈Ñ: current - bie≈ºƒÖcy kana≈Ç, all - wszystkie (domy≈õlnie)"
    )
    @app_commands.choices(
        mode=[
            app_commands.Choice(name="Always", value="Always"),
            app_commands.Choice(name="Threads Only", value="ThreadsOnly"),
            app_commands.Choice(name="Off", value="Off")
        ],
        scope=[
            app_commands.Choice(name="Current", value="current"),
            app_commands.Choice(name="All", value="all")
        ]
    )
    async def seensettings(self, interaction: discord.Interaction, help: bool = False, channel: discord.TextChannel = None, mode: str = None, scope: str = "all"):

        if help and (channel is not None or mode is not None or scope != "all"):
            embed = discord.Embed(
                title="‚ùå B≈ÇƒÖd parametr√≥w",
                description="Parametr `help` nie mo≈ºe byƒá u≈ºywany razem z innymi parametrami.",
                color=discord.Color.red()
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        
        if help:
            embed = discord.Embed(
                title="üìñ Pomoc: /seensettings",
                description="Komenda do zarzƒÖdzania systemem reakcji 'seen' (widziane) na wiadomo≈õciach.",
                color=discord.Color.blue()
            )
            embed.add_field(
                name="üéØ Co robi ta komenda?",
                value="Pozwala konfigurowaƒá automatyczne dodawanie reakcji 'seen' do wiadomo≈õci w okre≈õlonych kana≈Çach. System posiada trzy tryby pracy.",
                inline=False
            )
            embed.add_field(
                name="‚öôÔ∏è Tryby dzia≈Çania:",
                value="‚Ä¢ **Always** - Zawsze dodaje reakcje\n‚Ä¢ **ThreadsOnly** - Tylko w wƒÖtkach\n‚Ä¢ **Off** - Wy≈ÇƒÖczone",
                inline=False
            )
            embed.add_field(
                name="üìù Przyk≈Çady u≈ºycia:",
                value="‚Ä¢ `/seensettings help:True` - Ta pomoc\n‚Ä¢ `/seensettings` - Poka≈º wszystkie ustawienia\n‚Ä¢ `/seensettings channel:#kana≈Ç mode:Always` - Ustaw tryb dla kana≈Çu\n‚Ä¢ `/seensettings scope:current` - Poka≈º ustawienia bie≈ºƒÖcego kana≈Çu",
                inline=False
            )
            embed.add_field(
                name="üí° Wskaz√≥wki:",
                value="‚Ä¢ Ka≈ºdy kana≈Ç mo≈ºe mieƒá sw√≥j w≈Çasny tryb reakcji\n‚Ä¢ Domy≈õlnie wszystkie kana≈Çy majƒÖ tryb 'Always'\n‚Ä¢ Zmiany sƒÖ zapisywane automatycznie",
                inline=False
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        await interaction.response.defer(ephemeral=True)

        if mode is not None:
            if channel is None:
                channel = interaction.channel

            SEEN_SETTINGS[str(channel.id)] = mode
            save_seen_settings()

            embed = discord.Embed(
                title="Aktualizacja ustawie≈Ñ",
                description=f"Zaktualizowano ustawienie dla kana≈Çu {channel.mention} na `{mode}`.",
                color=discord.Color.green()
            )
        else:
            if scope == "current":
                ch = interaction.channel
                try:
                    with open(CONFIG_FILE, "r") as f:
                        current_settings = json.load(f)
                    setting = current_settings.get(str(ch.id), "Always")
                except Exception:
                    setting = SEEN_SETTINGS.get(str(ch.id), "Always")

                embed = discord.Embed(
                    title=f"Ustawienie dla bie≈ºƒÖcego kana≈Çu: {ch.name}",
                    description=f"**{ch.name}** (ID: {ch.id}): `{setting}`",
                    color=discord.Color.blue()
                )
            else:
                guild = interaction.guild
                embed = discord.Embed(title="Obecne ustawienia seen dla kana≈Ç√≥w", color=discord.Color.blue())
                description = ""

                try:
                    with open(CONFIG_FILE, "r") as f:
                        current_settings = json.load(f)
                except Exception:
                    current_settings = SEEN_SETTINGS

                for ch in guild.text_channels:
                    setting = current_settings.get(str(ch.id), "Always")
                    description += f"**{ch.name}** (ID: {ch.id}): `{setting}`\n"

                embed.description = description

        await interaction.followup.send(embed=embed, ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(SeenSettingsCog(bot))
