import json
import discord
import settings
from discord import app_commands
from discord.ext import commands
from embed import embed_res

CONFIG_FILE = "commands_settings/channel_settings.json"

try:
    with open(CONFIG_FILE, "r") as f:
        CHANNEL_SETTINGS = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    print(f"Error loading {CONFIG_FILE}: {e}. Using empty settings.")
    CHANNEL_SETTINGS = {}

def save_event_settings():
    with open(CONFIG_FILE, "w") as f:
        json.dump(CHANNEL_SETTINGS, f, indent=4)

class ChannelArchiveCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="channelarchive", description="Konfiguracja automatycznego archiwizowania kana≈Ç√≥w eventowych.")
    @app_commands.guilds(discord.Object(id=settings.main_guild_id))
    @app_commands.describe(
        help="Wy≈õwietl pomoc dla tej komendy",
        channel="Wybierz kana≈Ç do konfiguracji (opcjonalnie)",
        dni="Liczba dni nieaktywno≈õci przed archiwizacjƒÖ (0 = usu≈Ñ ustawienie)"
    )
    async def channelarchive(self, interaction: discord.Interaction, help: bool = False, channel: discord.TextChannel = None, dni: app_commands.Range[int, 0, 30] = None):

        if help and (channel is not None or dni is not None):
            embed = discord.Embed(
                title="‚ùå B≈ÇƒÖd parametr√≥w",
                description="Parametr `help` nie mo≈ºe byƒá u≈ºywany razem z innymi parametrami.",
                color=discord.Color.red()
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        
        if help:
            embed = discord.Embed(
                title="üìñ Pomoc: /channelarchive",
                description="System automatycznego przenoszenia nieaktywnych kana≈Ç√≥w eventowych do archiwum.",
                color=discord.Color.green()
            )
            embed.add_field(
                name="üéØ Co robi ta komenda?",
                value=f"Automatycznie przenosi kana≈Çy z kategorii aktywnych event√≥w (<#{settings.events_category}>) do archiwum (<#{settings.events_archive}>) po okre≈õlonym czasie nieaktywno≈õci.",
                inline=False
            )
            embed.add_field(
                name="‚öôÔ∏è Jak to dzia≈Ça?",
                value=f"‚Ä¢ Bot sprawdza kana≈Çy co 12 godzin\n‚Ä¢ Je≈õli ostatnia wiadomo≈õƒá jest starsza ni≈º ustawiony czas - kana≈Ç idzie do archiwum\n‚Ä¢ Gdy w zarchiwizowanym kanale pojawi siƒô nowa wiadomo≈õƒá - wraca do aktywnych\n‚Ä¢ Domy≈õlny czas archiwizacji: **{settings.def_archive} dni**",
                inline=False
            )
            embed.add_field(
                name="üìù Przyk≈Çady u≈ºycia:",
                value="‚Ä¢ `/channelarchive help:True` - Ta pomoc\n‚Ä¢ `/channelarchive` - Poka≈º wszystkie ustawienia\n‚Ä¢ `/channelarchive channel:#event-kana≈Ç dni:7` - Ustaw 7 dni dla kana≈Çu\n‚Ä¢ `/channelarchive channel:#event-kana≈Ç dni:0` - Usu≈Ñ indywidualne ustawienie",
                inline=False
            )
            embed.add_field(
                name="üí° Wskaz√≥wki:",
                value="‚Ä¢ Ka≈ºdy kana≈Ç mo≈ºe mieƒá sw√≥j w≈Çasny czas archiwizacji\n‚Ä¢ Kana≈Çy bez indywidualnych ustawie≈Ñ u≈ºywajƒÖ czasu domy≈õlnego\n‚Ä¢ Komenda dzia≈Ça tylko dla kana≈Ç√≥w w okre≈õlonych kategoriach.",
                inline=False
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)

        if dni is not None:
            if channel is None:
                channel = interaction.channel

            if not any(channel.category_id == x for x in [settings.events_category, settings.events_archive]):
                return await embed_res(interaction, "Nie mo≈ºna ustawiƒá archiwizacji dla tego kana≈Çu.", 0)

            if dni == 0:
                if str(channel.id) in CHANNEL_SETTINGS:
                    del CHANNEL_SETTINGS[str(channel.id)]
                    save_event_settings()
                    return await embed_res(interaction, f"Usuniƒôto ustawienie archiwizacji dla kana≈Çu {channel.mention}.", 1)
                else:
                    return await embed_res(interaction, "Nie znaleziono ustawienia archiwizacji dla tego kana≈Çu.", 0)

            CHANNEL_SETTINGS[str(channel.id)] = dni
            save_event_settings()
            return await embed_res(interaction, f"Zaktualizowano ustawienie dla kana≈Çu {channel.mention} na `{dni}` dni archiwizacji.", 1)
        else:
            description = ""
            if channel is None:
                for ch_id, dni in CHANNEL_SETTINGS.items():
                    description += f"<#{ch_id}> - `{dni}` dni archiwizacji\n"
                description += f"Reszta kana≈Ç√≥w - ustawienia domy≈õlne: `{settings.def_archive}` dni archiwizacji"
            else:
                if not any(channel.category_id == x for x in [settings.events_category, settings.events_archive]):
                    return await embed_res(interaction, "Ten kana≈Ç nie podlega archiwizacji.", 0)

                if not str(channel.id) in CHANNEL_SETTINGS:
                    dni = settings.def_archive
                else:
                    dni = CHANNEL_SETTINGS[str(channel.id)]

                description = f"<#{channel.id}> - `{dni}` dni archiwizacji\n"

            embed = discord.Embed(
                title="Ustawienia archiwizacji kana≈Ç√≥w",
                description=description if description else f"Wszystkie kana≈Çy majƒÖ domy≈õlne ustawienia archiwizacji ({settings.def_archive} dni).",
                color=discord.Color.green()
            )

            await interaction.response.send_message(embed=embed, ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(ChannelArchiveCog(bot))
